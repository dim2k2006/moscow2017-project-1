var initApp=function(){if(!("modules"in app&&"main"in app.modules)){var e=function(){var e=this;e.html=document.querySelector("html"),e.body=document.querySelector("body"),e.modules=app.modules,e.library=new Library,e.initLibrary=function(){e.library.init()},e.initModules=function(){for(var t in e.modules)e.modules.hasOwnProperty(t)&&"undefined"!=typeof e.modules[t].init&&"main"!==t&&"library"!==t&&e.modules[t].init()},e.init=function(){e.initLibrary(),e.initModules()}};"modules"in app||(app.modules={}),app.modules.main=new e,app.modules.main.init()}};window.addEventListener("load",initApp),function(){if(!("modules"in app&&"formSelectMultiple"in app.modules)){var e=function(){var e=this;e.body="",e.container=document.querySelector(".formSelectMultiple"),e.content=document.querySelector(".formSelectMultiple__content"),e.footer=document.querySelector(".formSelectMultiple__footer"),e.setupListener=function(){e.body.addEventListener("change",e.handleChange),e.body.addEventListener("click",e.handleClick)},e.handleChange=function(){var t=event.target;if(t.classList.contains("formSelectMultiple__select")){var n=t.closest(".formSelectMultiple"),l=n.querySelector(".formSelectMultiple__select"),a=l.value,o=n.dataset.list?JSON.parse(n.dataset.list):[],i=[].slice.call(l.querySelectorAll("option")),r=[],c=[];n.classList.contains("formSelectMultiple_state_inited")||([].slice.call(l.querySelectorAll("option")).forEach(function(e){var t=e.value,n=e.innerHTML;t&&n&&o.push({value:t,text:n})}),n.dataset.list=JSON.stringify(o),n.classList.add("formSelectMultiple_state_inited")),i.forEach(function(e){var t=e.value,n=e.innerHTML;t&&n&&r.push({value:t,text:n})}),r=r.filter(function(e){return e.value!==a}),r.forEach(function(e){o.forEach(function(t,n){t.value===e.value&&o.splice(n,1)})}),c=o,e.render(n,r,c)}},e.handleClick=function(t){var n=t.target;if(n.classList.contains("formSelectMultiple__link")){t.preventDefault();var l=n.closest(".formSelectMultiple"),a=n.getAttribute("href"),o=l.dataset.list?JSON.parse(l.dataset.list):[],i=[].slice.call(l.querySelectorAll("a")),r=[],c=[];c=i.map(function(e){var t=e.getAttribute("href"),n=e.innerHTML;return{value:t,text:n}}).filter(function(e){return e.value!==a}),c.forEach(function(e){o.forEach(function(t,n){t.value===e.value&&o.splice(n,1)})}),r=o,e.render(l,r,c)}},e.getValue=function(e){var t=[];if(e){var n=[].slice.call(e.querySelectorAll("a"));t=n.map(function(e){var t=e.getAttribute("href"),n=e.innerHTML;return{value:t,text:n}})}return t},e.render=function(e,t,n){var l=e.querySelector(".formSelectMultiple__select"),a=e.querySelector(".formSelectMultiple__list"),o='<option value=""></option>',i="";t.length>0&&t.forEach(function(e){o+='<option value="'+e.value+'">'+e.text+"</option>"}),n.length>0&&n.forEach(function(e){i+='<li class="formSelectMultiple__item"><a href="'+e.value+'" class="formSelectMultiple__link">'+e.text+"</a></li>"}),l&&(l.innerHTML=o),a&&(a.innerHTML=i),e.dispatchEvent(new Event("change"))},e.importDefaults=function(){e.body=app.modules.main.body},e.init=function(){e.container&&(e.importDefaults(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.formSelectMultiple=new e}}(),function(){if(!("modules"in app&&"modal"in app.modules)){var e=function(){var e=this;e.html="",e.body="",e.container=document.querySelector(".modal"),e.openButton=document.querySelector(".modal_trigger"),e.closeButton=document.querySelector(".modal_close"),e.setupListener=function(){e.body.addEventListener("click",e.router)},e.router=function(t){var n=t.target;n.classList.contains("modal_trigger")?(t.preventDefault(),e.open(t.target)):n.classList.contains("modal_close")&&(t.preventDefault(),e.close(t.target))},e.open=function(t){var n=t.getAttribute("href"),l=document.querySelector(n),a=t.dataset.photo,o=t.dataset.title,i=t.dataset.description;l.querySelector(".authorInfo__preview img").src=a,l.querySelector(".authorInfo__title").innerHTML=o,l.querySelector(".authorInfo__text p").innerHTML=i,e.html.classList.add("modal_state_open"),l.classList.add("modal_state_open")},e.close=function(t){var n=t.closest(".modal");n.classList.remove("modal_state_open"),e.html.classList.remove("modal_state_open")},e.importDefaults=function(){e.html=app.modules.main.html,e.body=app.modules.main.body},e.init=function(){e.container&&(e.importDefaults(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.modal=new e}}(),function(){if(!("modules"in app&&"schedule"in app.modules)){var e=function(){var e=this;e.body="",e.getSchedule="",e.getPlace="",e.getSchool="",e.getAuthor="",e.expand="",e.container=document.querySelector(".schedule"),e.content=document.querySelector(".scheduleList__content"),e.template=document.querySelector("#scheduleItem-template").innerHTML,e.monthNames=["январь","февраль","март","апрель","май","июнь","июль","август","сентябрь","октябрь","ноябрь","декабрь"],e.dataList="",e.setupListener=function(){},e.getData=function(){var t="",n="",l="";e.getSchedule(t,n,l).then(function(t){e.render(t)})},e.render=function(t){var n=document.createElement("ul");n.classList.add("scheduleList__list"),t.lectures.forEach(function(l){var a=document.createElement("li");a.classList.add("scheduleList__item"),a.innerHTML=e.template;var o=new Date(l.date),i=o.getDate(),r=e.monthNames[o.getMonth()],c=[],u=[];l.school.forEach(function(n){var l=e.expand([n],{title:"schools",data:t.schools},"title"),a=e.expand([n],{title:"schools",data:t.schools},"id");c.push('<span class="scheduleItem__school__item scheduleItem__school__item_'+a+'">'+l+"</span>")}),l.author.forEach(function(n){var l=e.expand([n],{title:"authors",data:t.authors},"title"),a=e.expand([n],{title:"authors",data:t.authors},"photo"),o=e.expand([n],{title:"authors",data:t.authors},"description");u.push('<a class="scheduleItem__author__link modal_trigger" href="#author" title="Посмотреть дополнительную информацию" data-photo="'+a+'" data-title="'+l+'" data-description="'+o+'">'+l+"</a>")}),l.isOver&&a.querySelector(".scheduleItem").classList.add("scheduleItem_state_inactive"),a.querySelector(".scheduleItem__day").innerHTML=i,a.querySelector(".scheduleItem__month").innerHTML=r,a.querySelector(".scheduleItem__time").innerHTML=l.time,a.querySelector(".scheduleItem__title").innerHTML=l.title,a.querySelector(".scheduleItem__school").innerHTML=c.join(""),a.querySelector(".scheduleItem__author").innerHTML+=u.join(", "),a.querySelector(".scheduleItem__audience").innerHTML+=e.expand([l.place],{title:"places",data:t.places},"title"),a.querySelector(".scheduleItem__place__link").innerHTML=e.expand([l.place],{title:"places",data:t.places},"address"),a.querySelector(".scheduleItem__place__link").href=e.expand([l.place],{title:"places",data:t.places},"link"),n.appendChild(a)}),e.content.innerHTML="",e.content.appendChild(n)},e.importDefaults=function(){e.body=app.modules.main.body,e.getSchedule=app.modules.main.library.getSchedule,e.expand=app.modules.main.library.expand},e.init=function(){e.container&&(e.importDefaults(),e.getData(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.schedule=new e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

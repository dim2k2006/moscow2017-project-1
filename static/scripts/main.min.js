!function(){if(!("modules"in app&&"modal"in app.modules)){var e=function(){var e=this;e.html="",e.body="",e.container=document.querySelector(".modal"),e.openButton=document.querySelector(".modal_trigger"),e.closeButton=document.querySelector(".modal_close"),e.setupListener=function(){e.body.addEventListener("click",e.router)},e.router=function(t){var n=t.target;n.classList.contains("modal_trigger")?(t.preventDefault(),e.open(t.target)):n.classList.contains("modal_close")&&(t.preventDefault(),e.close(t.target))},e.open=function(t){var n=t.getAttribute("href"),o=document.querySelector(n);e.html.classList.add("modal_state_open"),o.classList.add("modal_state_open")},e.close=function(t){var n=t.closest(".modal");n.classList.remove("modal_state_open"),e.html.classList.remove("modal_state_open")},e.importDefaults=function(){e.html=app.modules.main.html,e.body=app.modules.main.body},e.init=function(){e.container&&(e.importDefaults(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.modal=new e}}();var initApp=function(){if(!("modules"in app&&"main"in app.modules)){var e=function(){var e=this;e.html=document.querySelector("html"),e.body=document.querySelector("body"),e.modules=app.modules,e.library=new Library,e.initLibrary=function(){e.library.init()},e.initModules=function(){for(var t in e.modules)e.modules.hasOwnProperty(t)&&"undefined"!=typeof e.modules[t].init&&"main"!==t&&"library"!==t&&e.modules[t].init()},e.init=function(){e.initLibrary(),e.initModules()}};"modules"in app||(app.modules={}),app.modules.main=new e,app.modules.main.init()}};window.addEventListener("load",initApp),function(){if(!("modules"in app&&"schedule"in app.modules)){var e=function(){var e=this;e.body="",e.getSchedule="",e.getPlace="",e.getSchool="",e.getAuthor="",e.expand="",e.container=document.querySelector(".schedule"),e.content=document.querySelector(".scheduleList__content"),e.template=document.querySelector("#scheduleItem-template").innerHTML,e.monthNames=["январь","февраль","март","апрель","май","июнь","июль","август","сентябрь","октябрь","ноябрь","декабрь"],e.dataList="",e.setupListener=function(){},e.getData=function(){var t="",n="",o="";e.getSchedule(t,n,o).then(function(t){e.render(t)})},e.render=function(t){var n=document.createElement("ul");n.classList.add("scheduleList__list"),t.lectures.forEach(function(o){var i=document.createElement("li");i.classList.add("scheduleList__item"),i.innerHTML=e.template;var a=new Date(o.date),l=a.getDate(),u=e.monthNames[a.getMonth()];i.querySelector(".scheduleItem__day").innerHTML=l,i.querySelector(".scheduleItem__month").innerHTML=u,i.querySelector(".scheduleItem__time").innerHTML=o.time,i.querySelector(".scheduleItem__title").innerHTML=o.title,i.querySelector(".scheduleItem__place__link").innerHTML=e.expand([o.place],{title:"places",data:t.places}),n.appendChild(i)}),e.content.innerHTML="",e.content.appendChild(n)},e.importDefaults=function(){e.body=app.modules.main.body,e.getSchedule=app.modules.main.library.getSchedule,e.expand=app.modules.main.library.expand},e.init=function(){e.container&&(e.importDefaults(),e.getData(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.schedule=new e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

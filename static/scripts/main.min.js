var initApp=function(){if(!("modules"in app&&"main"in app.modules)){var e=function(){var e=this;e.html=document.querySelector("html"),e.body=document.querySelector("body"),e.modules=app.modules,e.library=new Library,e.initLibrary=function(){e.library.init()},e.initModules=function(){for(var t in e.modules)e.modules.hasOwnProperty(t)&&"undefined"!=typeof e.modules[t].init&&"main"!==t&&"library"!==t&&e.modules[t].init()},e.init=function(){e.initLibrary(),e.initModules()}};"modules"in app||(app.modules={}),app.modules.main=new e,app.modules.main.init()}};window.addEventListener("load",initApp),function(){if(!("modules"in app&&"formSelectMultiple"in app.modules)){var e=function(){var e=this;e.body="",e.container=document.querySelector(".formSelectMultiple"),e.setupListener=function(){e.body.addEventListener("change",e.handleChange),e.body.addEventListener("click",e.handleClick)},e.handleChange=function(){var t=event.target;if(t.classList.contains("formSelectMultiple__select")){var l=t.closest(".formSelectMultiple"),n=l.querySelector(".formSelectMultiple__select"),o=n.value,a=l.dataset.list?JSON.parse(l.dataset.list):[],r=[].slice.call(n.querySelectorAll("option")),i=[],u=[];l.classList.contains("formSelectMultiple_state_inited")||([].slice.call(n.querySelectorAll("option")).forEach(function(e){var t=e.value,l=e.innerHTML;t&&l&&a.push({value:t,text:l})}),l.dataset.list=JSON.stringify(a),l.classList.add("formSelectMultiple_state_inited")),r.forEach(function(e){var t=e.value,l=e.innerHTML;t&&l&&i.push({value:t,text:l})}),i=i.filter(function(e){return e.value!==o}),i.forEach(function(e){a.forEach(function(t,l){t.value===e.value&&a.splice(l,1)})}),u=a,e.render(l,i,u)}},e.handleClick=function(t){var l=t.target;if(l.classList.contains("formSelectMultiple__link")){t.preventDefault();var n=l.closest(".formSelectMultiple"),o=l.getAttribute("href"),a=n.dataset.list?JSON.parse(n.dataset.list):[],r=[].slice.call(n.querySelectorAll("a")),i=[],u=[];u=r.map(function(e){var t=e.getAttribute("href"),l=e.innerHTML;return{value:t,text:l}}).filter(function(e){return e.value!==o}),u.forEach(function(e){a.forEach(function(t,l){t.value===e.value&&a.splice(l,1)})}),i=a,e.render(n,i,u)}},e.getValue=function(e){var t=[];if(e){var l=[].slice.call(e.querySelectorAll("a"));t=l.map(function(e){var t=e.getAttribute("href"),l=e.innerHTML;return{value:t,text:l}})}return t},e.render=function(e,t,l){var n=e.querySelector(".formSelectMultiple__select"),o=e.querySelector(".formSelectMultiple__list"),a='<option value=""></option>',r="";t.length>0&&t.forEach(function(e){a+='<option value="'+e.value+'">'+e.text+"</option>"}),l.length>0&&l.forEach(function(e){r+='<li class="formSelectMultiple__item"><a href="'+e.value+'" class="formSelectMultiple__link">'+e.text+"</a></li>"}),n&&(n.innerHTML=a),o&&(o.innerHTML=r),e.dispatchEvent(new Event("render"))},e.importDefaults=function(){e.body=app.modules.main.body},e.init=function(){e.container&&(e.importDefaults(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.formSelectMultiple=new e}}(),function(){if(!("modules"in app&&"modal"in app.modules)){var e=function(){var e=this;e.html="",e.body="",e.container=document.querySelector(".modal"),e.openButton=document.querySelector(".modal_trigger"),e.closeButton=document.querySelector(".modal_close"),e.setupListener=function(){e.body.addEventListener("click",e.router)},e.router=function(t){var l=t.target;l.classList.contains("modal_trigger")?(t.preventDefault(),e.open(t.target)):l.classList.contains("modal_close")&&(t.preventDefault(),e.close(t.target))},e.open=function(t){var l=t.getAttribute("href"),n=document.querySelector(l),o=t.dataset.photo,a=t.dataset.title,r=t.dataset.description;n.querySelector(".authorInfo__preview img").src=o,n.querySelector(".authorInfo__title").innerHTML=a,n.querySelector(".authorInfo__text p").innerHTML=r,e.html.classList.add("modal_state_open"),n.classList.add("modal_state_open")},e.close=function(t){var l=t.closest(".modal");l.classList.remove("modal_state_open"),e.html.classList.remove("modal_state_open")},e.importDefaults=function(){e.html=app.modules.main.html,e.body=app.modules.main.body},e.init=function(){e.container&&(e.importDefaults(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.modal=new e}}(),function(){if(!("modules"in app&&"schedule"in app.modules)){var e=function(){var e=this;e.body="",e.getSchedule="",e.getPlace="",e.getSchool="",e.getAuthor="",e.expand="",e.getValue="",e.container=document.querySelector(".schedule"),e.resultNumber=document.querySelector(".schedule__arrow__text span"),e.content=document.querySelector(".scheduleList__content"),e.trigger=document.querySelectorAll(".schedule__trigger"),e.schoolSelect=document.querySelector('.formSelectMultiple__select[name="school"]'),e.authorSelect=document.querySelector('.formSelectMultiple__select[name="author"]'),e.dateFromInput=document.querySelector('.formInput__input[name="from"]'),e.dateToInput=document.querySelector('.formInput__input[name="to"]'),e.schoolSelectMultiple=document.querySelector(".formSelectMultiple.formSelectMultiple_type_school"),e.authorSelectMultiple=document.querySelector(".formSelectMultiple.formSelectMultiple_type_author"),e.selectMultiple=document.querySelectorAll(".formSelectMultiple"),e.template=document.querySelector("#scheduleItem-template").innerHTML,e.monthNames=["январь","февраль","март","апрель","май","июнь","июль","август","сентябрь","октябрь","ноябрь","декабрь"],e.dataList="",e.setupListener=function(){e.dateFromInput.addEventListener("change",e.getData),e.dateToInput.addEventListener("change",e.getData),e.selectMultiple.forEach(function(t){t.addEventListener("render",e.getData)}),e.trigger.forEach(function(t){t.addEventListener("click",e.showFilter)})},e.showFilter=function(t){t.preventDefault(),e.container.classList.contains("schedule_state_filter")?e.container.classList.remove("schedule_state_filter"):e.container.classList.add("schedule_state_filter")},e.setupSchoolFilter=function(){e.getSchool().then(function(t){var l='<option value=""></option>';t.forEach(function(e){l+='<option value="'+e.id+'">'+e.title+"</option>"}),e.schoolSelect.innerHTML=l})},e.setupAuthorFilter=function(){e.getAuthor().then(function(t){var l='<option value=""></option>';t.forEach(function(e){l+='<option value="'+e.id+'">'+e.title+"</option>"}),e.authorSelect.innerHTML=l})},e.getData=function(){var t=e.dateFromInput.value.replace(/-/g,"/"),l=e.dateToInput.value.replace(/-/g,"/"),n=e.getValue(e.schoolSelectMultiple),o=e.getValue(e.authorSelectMultiple);e.getSchedule(t,l,"").then(function(t){n.length>0&&(t.lectures=t.lectures.filter(function(e){var t=!1;return n.forEach(function(l){e.school.indexOf(parseInt(l.value))!==-1&&(t=!0)}),t})),o.length>0&&(t.lectures=t.lectures.filter(function(e){var t=!1;return o.forEach(function(l){e.author.indexOf(parseInt(l.value))!==-1&&(t=!0)}),t})),e.render(t)})},e.render=function(t){var l=document.createElement("ul");if(l.classList.add("scheduleList__list"),t.lectures.forEach(function(n){var o=document.createElement("li");o.classList.add("scheduleList__item"),o.innerHTML=e.template;var a=new Date(n.date),r=a.getDate(),i=e.monthNames[a.getMonth()],u=[],c=[];n.school.forEach(function(l){var n=e.expand([l],{title:"schools",data:t.schools},"title"),o=e.expand([l],{title:"schools",data:t.schools},"id");u.push('<span class="scheduleItem__school__item scheduleItem__school__item_'+o+'">'+n+"</span>")}),n.author.forEach(function(l){var n=e.expand([l],{title:"authors",data:t.authors},"title"),o=e.expand([l],{title:"authors",data:t.authors},"photo"),a=e.expand([l],{title:"authors",data:t.authors},"description");c.push('<a class="scheduleItem__author__link modal_trigger" href="#author-modal" title="Посмотреть дополнительную информацию" data-photo="'+o+'" data-title="'+n+'" data-description="'+a+'">'+n+"</a>")}),n.isOver&&o.querySelector(".scheduleItem").classList.add("scheduleItem_state_inactive"),o.querySelector(".scheduleItem__day").innerHTML=r,o.querySelector(".scheduleItem__month").innerHTML=i,o.querySelector(".scheduleItem__time").innerHTML=n.time,o.querySelector(".scheduleItem__title").innerHTML=n.title,o.querySelector(".scheduleItem__school").innerHTML=u.join(""),o.querySelector(".scheduleItem__author").innerHTML+=c.join(", "),o.querySelector(".scheduleItem__audience").innerHTML+=e.expand([n.place],{title:"places",data:t.places},"title"),o.querySelector(".scheduleItem__place__link").innerHTML=e.expand([n.place],{title:"places",data:t.places},"address"),o.querySelector(".scheduleItem__place__link").href=e.expand([n.place],{title:"places",data:t.places},"link"),l.appendChild(o)}),0===t.lectures.length){var n=document.createElement("li");n.classList.add("scheduleList__item"),n.classList.add("scheduleList__item_state_empty"),n.innerHTML="По вашему запросу ничего не найдено.",l.appendChild(n)}e.content.innerHTML="",e.content.appendChild(l),e.resultNumber.innerHTML=t.lectures.length},e.importDefaults=function(){e.body=app.modules.main.body,e.getSchedule=app.modules.main.library.getSchedule,e.getSchool=app.modules.main.library.getSchool,e.getAuthor=app.modules.main.library.getAuthor,e.expand=app.modules.main.library.expand,e.getValue=app.modules.formSelectMultiple.getValue},e.init=function(){e.container&&(e.importDefaults(),e.setupSchoolFilter(),e.setupAuthorFilter(),e.getData(),e.setupListener())}};"modules"in app||(app.modules={}),app.modules.schedule=new e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
